version: "3"
name: "distributed-travels" # app name (ALL whitespaces are stripped)
services: # services / containers
# custom services will require Dockerfiles
  # service Oferts #
  # service Hotels #
  transport:
    image: ${DOCKER_REGISTRY-}transport
    build:
      context: .
      dockerfile: Transport/Dockerfile
    hostname: 'transport'
    container_name: 'transport'
    depends_on:
      - rabbitmq
      - mariadb
    ports:
      - 8010:80
    networks:
      - backend

  reservation:
    image: ${DOCKER_REGISTRY-}reservation
    build:
      context: .
      dockerfile: Reservation/Dockerfile
    hostname: 'reservation'
    container_name: 'reservation'
    depends_on:
      - rabbitmq
      - mariadb
    ports:
      - 8020:80
    networks:
      - backend
  # service Payments #
  # service WebAPI #
  # service Frontend #
  mariadb:
  # https://hub.docker.com/_/mariadb
    image: mariadb:10.4
    hostname: 'mariadb'
    container_name: 'mariadb'
    environment:
      - MARIADB_ROOT_PASSWORD=test # required root password, to change
    ports:
      - 3306:3306
    volumes:
      - ./Docker/init/db:/docker-entrypoint-initdb.d
      #- mariadb:/var/lib/mysql
    networks:
      backend:
        aliases:
          - mysql

  phpmyadmin:
  # https://hub.docker.com/_/phpmyadmin
    image: phpmyadmin
    hostname: 'phpmyadmin'
    container_name: 'phpmyadmin'
    depends_on: # specifies order of start-up
      - mariadb
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1 # allows for specifying server on login page
    networks:
      - backend
  
  rabbitmq: # broker service from default image
  # https://hub.docker.com/_/rabbitmq
    image: rabbitmq:3-management # management for web interface on port 15672
    hostname: 'rabbitmq' # host name, otherwise it's random alphanum string
    container_name: 'rabbitmq' # container name
    ports: # port forwarding
        - 5672:5672 # normal communication
        - 15672:15672 # web interface
    networks:
        - backend # connected networks

networks: # defining networks
  frontend: {} # network for Api - website communication
  backend: {} # network for the rest of communication

#volumes: # storage volumes
#  mariadb: {} 


